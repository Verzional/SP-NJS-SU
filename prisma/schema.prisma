// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  SA
  PR
  TECH
  LECTURER
  VIEWER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(VIEWER)
  accounts      Account[]
  sessions      Session[]
  activities    Applications[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Activity {
  id           String         @id @default(cuid())
  title        String
  description  String
  location     String
  quota        Int
  applications Applications[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Achievement {
  id            String   @id @default(cuid())
  title         String
  description   String
  imageUrl      String?
  imagePublicId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Applications {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}
